1. Tablice indexowane:
Tablice indexowane są najprostszym typem tablicy w PHP. Elementy w tablicy są indeksowane liczbami, które zaczynają się od zera. Oto przykład tablicy indexowanej:

```php
$tablica = array('jabłko', 'banan', 'pomarańcza');
```

W powyższym przykładzie mamy trzy elementy w tablicy: 'jabłko' (indeks 0), 'banan' (indeks 1) i 'pomarańcza' (indeks 2). Możemy uzyskać dostęp do elementów za pomocą indeksów, na przykład: `$tablica[1]` zwróci 'banan'.

Funkcje tablicowe dla tablic indexowanych:

- `count($tablica)` - Zwraca liczbę elementów w tablicy.
- `array_push($tablica, $element1, $element2, ...)` - Dodaje jedno lub więcej elementów na koniec tablicy.
- `array_pop($tablica)` - Usuwa i zwraca ostatni element tablicy.
- `array_merge($tablica1, $tablica2)` - Łączy dwie tablice w jedną.
- `array_search($element, $tablica)` - Wyszukuje element w tablicy i zwraca indeks, pod którym został znaleziony.

2. Tablice asocjacyjne:
Tablice asocjacyjne pozwalają przypisywać elementom klucze tekstowe zamiast numerycznych indeksów. Klucze mogą być łańcuchami znaków lub liczbami. Oto przykład tablicy asocjacyjnej:

```php
$tablica = array('jabłko' => 5, 'banan' => 8, 'pomarańcza' => 3);
```

W powyższym przykładzie mamy trzy elementy w tablicy, gdzie 'jabłko', 'banan' i 'pomarańcza' są kluczami, a wartości to odpowiednio 5, 8 i 3. Możemy uzyskać dostęp do elementów, używając ich kluczy, na przykład: `$tablica['banan']` zwróci 8.

Funkcje tablicowe dla tablic asocjacyjnych:

- `count($tablica)` - Zwraca liczbę elementów w tablicy.
- `array_keys($tablica)` - Zwraca tablicę zawierającą wszystkie klucze z tablicy.
- `array_values($tablica)` - Zwraca tablicę zawierającą wszystkie wartości z tablicy.
- `array_key_exists($klucz, $tablica)` - Sprawdza, czy klucz istnieje w tablicy.
- `array_search($wartość, $tablica)` - Wyszukuje wartość w tablicy i zwraca klucz, pod którym zosta

3. Tablice wielowymiarowe:
Tablice wielowymiarowe są tablicami, które zawierają inne tablice jako swoje elementy. Mogą mieć dowolną liczbę wymiarów. Oto przykład tablicy wielowymiarowej:

```php
$tablica = array(
    array('jabłko', 'banan', 'pomarańcza'),
    array('czerwony', 'żółty', 'pomarańczowy')
);
```

W powyższym przykładzie mamy tablicę, która zawiera dwie tablice jako swoje elementy. Pierwsza tablica zawiera owoce: 'jabłko', 'banan' i 'pomarańcza'. Druga tablica zawiera kolory: 'czerwony', 'żółty' i 'pomarańczowy'. Możemy uzyskać dostęp do elementów, korzystając z indeksów wielokrotnych, na przykład: `$tablica[0][1]` zwróci 'banan', a `$tablica[1][2]` zwróci 'pomarańczowy'.

Funkcje tablicowe dla tablic wielowymiarowych:

- `count($tablica, COUNT_RECURSIVE)` - Zwraca liczbę elementów w tablicy, włączając elementy tablic podrzędnych.
- `array_push($tablica, $element1, $element2, ...)` - Dodaje jedno lub więcej elementów na koniec tablicy podrzędnej.
- `array_merge($tablica1, $tablica2)` - Łączy dwie tablice wielowymiarowe w jedną.
- `array_column($tablica, $indeks)` - Zwraca tablicę z wartościami z wybranej kolumny w tablicy wielowymiarowej.
- `array_walk_recursive($tablica, $funkcja)` - Przechodzi rekurencyjnie przez tablicę i wywołuje podaną funkcję dla każdego elementu.

Podsumowanie:
- Tablice indexowane są oparte na numerycznych indeksach.
- Tablice asocjacyjne używają kluczy tekstowych lub liczbowych.
- Tablice wielowymiarowe zawierają inne tablice jako elementy.
- Funkcje tablicowe umożliwiają manipulację danymi w tablicach, zależnie od potrzeb.

Dzięki różnym typom tablic i funkcjom tablicowym PHP oferuje szeroki zakres możliwości manipulacji danymi w tablicach, zgodnie z konkretnymi wymaganiami i strukturą danych.

--Warto wiedzieć:
Zagnieżdżanie tablic w PHP polega na umieszczaniu jednej tablicy wewnątrz innej tablicy jako jej element. To umożliwia tworzenie struktur danych o bardziej skomplikowanym układzie. Oto kilka przykładów, jak zagnieżdżać tablice:

1. Zagnieżdżanie tablic przy tworzeniu:

```php
$tablica1 = array(
    'jabłka',
    'banany',
    array('pomarańcze', 'kiwi', 'mandarynki')
);
```

W powyższym przykładzie mamy trzy elementy w tablicy `$tablica1`. Trzeci element to tablica, która zawiera trzy owoce. Możemy uzyskać dostęp do tych owoców za pomocą indeksów, na przykład: `$tablica1[2][1]` zwróci 'kiwi'.

2. Dodawanie tablic do istniejących tablic:

```php
$tablica2 = array('jabłko', 'banan');

$tablica2[] = array('pomarańcza', 'kiwi');
```

W powyższym przykładzie najpierw tworzymy tablicę `$tablica2` z dwoma owocami. Następnie dodajemy do niej kolejną tablicę, która zawiera dwa owoce. Teraz `$tablica2` jest tablicą zagnieżdżoną, zawierającą jedną tablicę wewnątrz.

3. Zagnieżdżanie tablic wielowymiarowych:

```php
$tablica3 = array(
    array('jabłko', 'banan'),
    array('pomarańcza', 'kiwi')
);
```

W powyższym przykładzie mamy tablicę `$tablica3`, która składa się z dwóch tablic, z każdej zawierającej dwa owoce. Możemy uzyskać dostęp do tych owoców za pomocą indeksów, na przykład: `$tablica3[1][0]` zwróci 'pomarańcza'.

Zagnieżdżanie tablic umożliwia tworzenie bardziej złożonych struktur danych, takich jak tablice wielowymiarowe lub struktury danych o różnych poziomach. Można zagnieżdżać tablice dowolną ilość razy, tworząc potrzebną hierarchię i organizację danych.

Funkcja `unset()` w PHP służy do usuwania elementów z tablicy lub zmiennych. Może być używana do usunięcia elementów z tablicy indexowanej, asocjacyjnej lub nawet zagnieżdżonej tablicy. Oto kilka przykładów użycia funkcji `unset()` w tablicach PHP:

1. Usuwanie elementu z tablicy indexowanej:
```php
$tablica = array('jabłko', 'banan', 'pomarańcza');
unset($tablica[1]);

// Po wykonaniu powyższego kodu, element o indeksie 1 ('banan') zostanie usunięty z tablicy.
```

2. Usuwanie elementu z tablicy asocjacyjnej:
```php
$tablica = array('jabłko' => 5, 'banan' => 8, 'pomarańcza' => 3);
unset($tablica['banan']);

// Po wykonaniu powyższego kodu, element o kluczu 'banan' (o wartości 8) zostanie usunięty z tablicy.
```

3. Usuwanie elementu z zagnieżdżonej tablicy:
```php
$tablica = array(
    'owoce' => array('jabłko', 'banan', 'pomarańcza'),
    'kolory' => array('czerwony', 'żółty', 'pomarańczowy')
);
unset($tablica['owoce'][1]);

// Po wykonaniu powyższego kodu, element o indeksie 1 ('banan') zostanie usunięty z tablicy zagnieżdżonej.
```

Funkcja `unset()` usuwa elementy z tablicy, ale nie zmienia numerów indeksów. Jeśli usuniemy element z tablicy indexowanej, numeracja indeksów nie zostanie dostosowana automatycznie. Dlatego po usunięciu elementu z tablicy indexowanej może wystąpić luka w numeracji indeksów.

Ważne jest również zauważyć, że funkcja `unset()` może być używana do usuwania innych zmiennych poza elementami tablic. Może to obejmować zmienne skalarne, obiekty, etc. Przed użyciem funkcji `unset()` warto upewnić się, że korzystamy z niej zgodnie z zamierzeniem i dokładnie rozumiemy, jakie elementy lub zmienne chcemy usunąć z naszego kodu.
