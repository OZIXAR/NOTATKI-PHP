<?php
Poradnik o typach wartości w PHP


1. Integer (liczby całkowite):
   Integer to typ danych używany do przechowywania liczb całkowitych (bez części dziesiętnej). Może to być dodatnia liczba, ujemna lub zero. Na przykład:
   
   <?php
   $wiek = 25;
   ?>

2. Float (liczby zmiennoprzecinkowe):
   Float to typ danych używany do przechowywania liczb zmiennoprzecinkowych (z częścią dziesiętną). Na przykład:
   
   <?php
   $pi = 3.14;
  ?>

3. String (łańcuchy znaków):
   String to typ danych używany do przechowywania tekstu. Może być zapisany w pojedynczych lub podwójnych cudzysłowach. Na przykład:
   
    <?php
   $imie = "Jan";
  ?>

4. Boolean (wartości logiczne):
   Boolean to typ danych, który może przyjąć jedną z dwóch wartości: true (prawda) lub false (fałsz). Służy do reprezentowania stanu logicznego. Na przykład:
   
    <?php
   $czyPrawda = true;
   $czyFałsz = false;
  ?>

5. Array (tablice):
   Tablica to struktura danych, która przechowuje wiele wartości w jednej zmiennej. Może zawierać różne typy wartości i jest indeksowana numerycznie lub za pomocą kluczy. Na przykład:
   
   <?php
   $numery = array(1, 2, 3, 4, 5);
   $osoba = array("imie" => "Jan", "nazwisko" => "Kowalski", "wiek" => 25);
   ?>

6. Null (brak wartości):
   Null to specjalna wartość, która oznacza brak wartości. Może być przypisana do zmiennej, gdy nie ma innej wartości. Na przykład:
   
    <?php
   $zmienna = null;
   ?>

7. Object (obiekty):
   Obiekty to instancje klas w PHP. Są bardziej zaawansowanym typem danych, które przechowują zarówno właściwości (zmienne) jak i metody (funkcje). Na przykład:
   
    <?php
   class Osoba {
     public $imie;
     public $wiek;
   }
   $osoba = new Osoba();
   $osoba->imie = "Jan";
   $osoba->wiek = 25;
?>

Czasami konieczne jest sprawdzenie typu zmiennej w PHP. Do tego celu można użyć funkcji var_dump(), która wyświetla informacje o typie i wartości danej zmiennej. Oto jak używać funkcji var_dump():

Wykorzystanie funkcji var_dump():
Aby sprawdzić typ zmiennej, użyj funkcji var_dump() i przekaż zmienną jako argument. Funkcja ta zwróci informacje o typie i wartości zmiennej. Na przykład:

php
Copy code
$imie = "Jan";
var_dump($imie);
Wynik:

c
Copy code
string(3) "Jan"
Interpretacja wyniku:
Wynik funkcji var_dump() składa się z kilku elementów. Pierwszy element to nazwa typu danych (np. string, integer). Następnie w nawiasach podane jest również dodatkowe info, takie jak długość stringa lub liczba bajtów dla innych typów. Na końcu wyświetlana jest wartość zmiennej.

Sprawdzanie typu zmiennej:
Aby sprawdzić typ zmiennej, spójrz na pierwszą część wyniku var_dump(). Na przykład, w przypadku zmiennej $imie, wyświetli się "string", co oznacza, że jest to zmienna typu string.

Sprawdzanie wartości zmiennej:
Wartość zmiennej jest wyświetlana na końcu wyniku var_dump(). Na przykład, dla zmiennej $imie, wartość to "Jan".

Sprawdzanie typu złożonych struktur danych:
Funkcja var_dump() jest również przydatna do sprawdzania typów w przypadku bardziej złożonych struktur danych, takich jak tablice i obiekty. Na przykład:

php
Copy code
$liczby = array(1, 2, 3);
var_dump($liczby);
Wynik:

scss
Copy code
array(3) {
  [0]=> int(1)
  [1]=> int(2)
  [2]=> int(3)
}
W tym przypadku, var_dump() wyświetla informacje o typie (array) oraz wartościach elementów tablicy.

Dzięki funkcji var_dump() można łatwo i szybko sprawdzić typy zmiennych w PHP oraz zrozumieć ich wartości. Jest to przydatne narzędzie podczas debugowania i analizowania kodu. Pamiętaj, że var_dump() jest głównie używany w celach developerskich i powinien być usunięty lub wyłączony w kodzie produkcyjnym, aby nie wyświetlać niepożądanych informacji.
